# --- Cleanup prior initialization transient services ---
# Ignore failures for cases where the service does not yet exist
- name: Stop k3s-init
  systemd:
    name: k3s-init
    state: stopped
  failed_when: false

# k3s-init won't work if the port is already in use (failed_when: false - ignore errors)
- name: Stop k3s
  systemd:
    name: k3s
    state: stopped
  failed_when: false

- name: Clean previous runs of k3s-init  # noqa command-instead-of-module
  # The systemd module does not support "reset-failed", so we need to resort to command.
  command: systemctl reset-failed k3s-init
  failed_when: false
  changed_when: false

# --- Deploy vip (VIP allocates virtual ip to control nodes and can be thought of as a LB for control nodes) --- ------------
- name: Deploy vip manifest
  include_tasks: vip.yml

- name: Deploy kube-vip manifest
  include_tasks: kube-vip.yml
  tags: kubevip

# Initialization with systemd-run (transient service) and parameters - `extra_server_args, server_init_args`
- name: Init cluster inside the transient k3s-init service
  command:
    cmd: "systemd-run -p RestartSec=2 \
                      -p Restart=on-failure \
                      --unit=k3s-init \
                      k3s server {{ k3s_cn_server_init_args }}"
    creates: "{{ systemd_dir }}/k3s-init.service"

# Verify all control nodes have joined the cluster and save k3s init logs
- name: Verification
  when: not ansible_check_mode
  block:
    - name: Verify that all nodes actually joined (check k3s-init.service if this fails)
      command:
        cmd: k3s kubectl get nodes -l "node-role.kubernetes.io/master=true" -o=jsonpath="{.items[*].metadata.name}"
      register: nodes
      until: nodes.rc == 0 and (nodes.stdout.split() | length) == (groups[k3s_cn_group_name | default('k3s_control_nodes')] | length)  # yamllint disable-line rule:line-length
      retries: 45
      delay: 10
      changed_when: false
  always:
    - name: Save logs of k3s-init.service
      include_tasks: fetch_k3s_init_logs.yml
    - name: Kill the temporary service used for initialization
      systemd:
        name: k3s-init
        state: stopped
      failed_when: false

# Copy and enable k3s service
- name: Copy K3s service file
  register: k3s_service
  template:
    src: "k3s.service.j2"
    dest: "{{ systemd_dir }}/k3s.service"
    owner: root
    group: root
    mode: 0644

- name: Enable and check K3s service
  systemd:
    name: k3s
    daemon_reload: true
    state: restarted
    enabled: true

# Manage node token (wait for availability, access, read from control, store, restore access)
- name: Wait for node-token
  wait_for:
    path: /var/lib/rancher/k3s/server/node-token

- name: Register node-token file access mode
  stat:
    path: /var/lib/rancher/k3s/server
  register: p

- name: Change file access node-token
  file:
    path: /var/lib/rancher/k3s/server
    mode: "g+rx,o+rx"

- name: Read node-token from control node
  slurp:
    src: /var/lib/rancher/k3s/server/node-token
  register: node_token

- name: Store control node-token
  set_fact:
    token: "{{ node_token.content | b64decode | regex_replace('\n', '') }}"

- name: Restore node-token file access
  file:
    path: /var/lib/rancher/k3s/server
    mode: "{{ p.stat.mode }}"

- name: Create directory .kube
  file:
    path: "{{ ansible_userhome }}/.kube"
    state: directory
    owner: "{{ ansible_uid }}"
    mode: "u=rwx,g=rx,o="

- name: Copy config file to user home directory
  copy:
    src: /etc/rancher/k3s/k3s.yaml
    dest: "{{ ansible_userhome }}/.kube/config"
    remote_src: true
    owner: "{{ ansible_uid }}"
    mode: "u=rw,g=,o="

#Configure kubectl cluster
- name: Configure kubectl cluster to {{ endpoint_url }}
  command: >-
    k3s kubectl config set-cluster default
      --server={{ endpoint_url }}
      --kubeconfig {{ ansible_userhome }}/.kube/config
  changed_when: true
  vars:
    endpoint_url: >-
      https://{{ k3s_cn_apiserver_endpoint | ansible.utils.ipwrap }}:6443

#Create kubectl and crictl symlinks
- name: Create kubectl symlink
  file:
    src: /usr/local/bin/k3s
    dest: /usr/local/bin/kubectl
    state: link

- name: Create crictl symlink
  file:
    src: /usr/local/bin/k3s
    dest: /usr/local/bin/crictl
    state: link

#Remove manifests and folders that are only needed for bootstrapping cluster so k3s does not auto apply on start
- name: Get contents of manifests folder
  find:
    paths: /var/lib/rancher/k3s/server/manifests
    file_type: file
  register: k3s_server_manifests

- name: Get sub dirs of manifests folder
  find:
    paths: /var/lib/rancher/k3s/server/manifests
    file_type: directory
  register: k3s_server_manifests_directories

- name: Remove manifests and folders that are only needed for bootstrapping cluster so k3s doesn't auto apply on start
  file:
    path: "{{ item.path }}"
    state: absent
  with_items:
    - "{{ k3s_server_manifests.files }}"
    - "{{ k3s_server_manifests_directories.files }}"
  loop_control:
    label: "{{ item.path }}"

# Post server provisioning tasks, store kubeconfig (need to verify if this works with multi control node cluster)
- name: Copying kubeconfig from {{ hostvars[groups[k3s_cn_group_name | default('k3s_control_nodes')][0]]['ansible_hostname'] }}
  ansible.builtin.fetch:
    src: "{{ ansible_userhome }}/.kube/config"
    dest: ./kubeconfig
    flat: true
  when: ansible_hostname == hostvars[groups[k3s_cn_group_name | default('k3s_control_nodes')][0]]['ansible_hostname']